mod command;
mod config;
mod file;
mod pkg_config;

use std::{
    io::{self},
    path::PathBuf,
};

use clap::{command, Parser, Subcommand};

use crate::command::{build, clean, init, run};

#[derive(Parser, Debug)]
#[command(author, version, about, long_about = None)]
pub struct Args {
    #[command(subcommand)]
    command: Option<Commands>,
}

#[derive(Subcommand, Debug)]
enum Commands {
    /// Initialize a project folder
    Init {
        /// Folder to initialize
        path: Option<PathBuf>,
    },

    /// Build files
    Build {
        /// Maky config file or folder
        #[arg(short = 'f', long = "file", default_value_t = ("./Maky.toml").to_string())]
        config_file: String,

        /// Build in release mode
        #[arg(long)]
        release: bool,
    },

    /// Build files then run the specified file
    Run {
        /// Maky config file or folder
        #[arg(short = 'f', long = "file", default_value_t = ("./Maky.toml").to_string())]
        config_file: String,

        /// Build in release mode
        #[arg(long)]
        release: bool,

        /// Path of the source file to build and run
        file: PathBuf,

        /// Arguments for the source file to run
        args: Vec<String>,
    },

    /// Remove artifacts generated by Maky in the past
    Clean {
        /// Maky config file or folder
        #[arg(short = 'f', long = "file", default_value_t = ("./Maky.toml").to_string())]
        config_file: String,
    },
}

fn main() -> io::Result<()> {
    kdam::term::init(true);

    let args = Args::parse();

    if let Some(command) = args.command {
        match command {
            Commands::Build {
                config_file,
                release,
            } => build(config_file, release)?,
            Commands::Run {
                config_file,
                release,
                file,
                args,
            } => run(config_file, release, file, args)?,
            Commands::Init { path } => init(path)?,
            Commands::Clean { config_file } => clean(config_file)?,
        }
    }

    return Ok(());
}
