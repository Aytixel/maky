mod command;
mod config;
mod pkg_config;

use clap::{command, Parser, Subcommand};
use command::{BuildArguments, CleanArguments, FormatArguments, InitArguments, RunArguments};

use crate::command::{build, clean, format, init, run};

#[derive(Parser, Debug)]
#[command(author, version, about, long_about = None)]
struct Args {
    #[command(subcommand)]
    command: Option<Commands>,
}

#[derive(Subcommand, Debug)]
enum Commands {
    /// Initialize a project folder
    Init {
        #[clap(flatten)]
        arguments: InitArguments,
    },

    /// Build files
    Build {
        #[clap(flatten)]
        arguments: BuildArguments,
    },

    /// Build files then run the specified file
    Run {
        #[clap(flatten)]
        arguments: RunArguments,
    },

    /// [Experimental] Formats all bin and lib files of the current project
    Fmt {
        #[clap(flatten)]
        arguments: FormatArguments,
    },

    /// Remove artifacts generated by Maky in the past
    Clean {
        #[clap(flatten)]
        arguments: CleanArguments,
    },
}

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    kdam::term::init(true);

    let args = Args::parse();

    if let Some(command) = args.command {
        match command {
            Commands::Init { arguments } => init(arguments)?,
            Commands::Build { arguments } => {
                build(arguments)?;
            }
            Commands::Run { arguments } => run(arguments)?,
            Commands::Fmt { arguments } => format(arguments).await?,
            Commands::Clean { arguments } => clean(arguments)?,
        }
    }

    return Ok(());
}
